name: Build and Release


on:
  push:
    branches:
      - master
    paths:
      - 'build.gradle.kts' # Trigger when build.gradle.kts changes


permissions:
  contents: write


jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up JDK 21
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      # Step 3: Cache Gradle dependencies
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Step 4: Extract version from build.gradle.kts
      - name: Extract Version from build.gradle.kts
        id: extract_version
        run: |
          VERSION=$(grep -E 'version = "(.*)"' build.gradle.kts | sed -E 's/version = "(.*)"/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"

      # Step 5: Fetch the latest release version
      - name: Fetch Latest Release Version
        id: fetch_latest_release
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.tag_name')
          if [[ "$LATEST_VERSION" == "null" || -z "$LATEST_VERSION" ]]; then
            LATEST_VERSION="0.0.0" # Default version if no releases exist
          fi
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
          echo "Latest release version: $LATEST_VERSION"

      # Step 6: Compare versions
      - name: Compare Versions
        id: compare_versions
        run: |
          if [[ "${{ env.VERSION }}" != "${{ env.LATEST_VERSION }}" ]]; then
            echo "Version has changed from ${{ env.LATEST_VERSION }} to ${{ env.VERSION }}. Proceeding with build and release."
          else
            echo "Version has not changed. Skipping build and release."
            exit 0
          fi

      # Step 7: Build the plugin
      - name: Build Plugin
        run: ./gradlew clean build

      # Step 8: Create a GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          release_name: QuickSort ${{ env.VERSION }}
          draft: false
          prerelease: false

      # Step 9: Upload JAR to the release
      - name: Upload JAR to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/libs/QuickSort-${{ env.VERSION }}.jar
          asset_name: QuickSort-${{ env.VERSION }}.jar
          asset_content_type: application/java-archive
